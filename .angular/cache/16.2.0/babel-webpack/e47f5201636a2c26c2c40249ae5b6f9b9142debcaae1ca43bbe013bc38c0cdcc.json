{"ast":null,"code":"import { __decorate } from \"tslib\";\n// register.component.ts\nimport { Component } from '@angular/core';\nexport let RegisterComponent = class RegisterComponent {\n  constructor(taskboard, router) {\n    this.taskboard = taskboard;\n    this.router = router;\n    this.username = '';\n    this.email = '';\n    this.password = '';\n    this.show = false;\n  }\n  togglePassword() {\n    this.show = !this.show;\n  }\n  registerUser() {\n    if (!this.validateInputs()) {\n      return;\n    }\n    const userData = {\n      username: this.username,\n      email: this.email,\n      password: this.password\n    };\n    this.taskboard.registerUser(userData).subscribe(response => {\n      console.log(response.message);\n      alert(\"Registered Successfully, Please Login\");\n      this.router.navigate(['login']);\n    }, error => {\n      console.error(error);\n    });\n  }\n  validateInputs() {\n    if (!this.username || !this.email || !this.password) {\n      alert('All fields are required.');\n      return false;\n    }\n    if (!this.isValidEmail(this.email)) {\n      alert('Invalid email format.');\n      return false;\n    }\n    return true;\n  }\n  isValidEmail(email) {\n    const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n    return emailPattern.test(email);\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);","map":{"version":3,"names":["Component","RegisterComponent","constructor","taskboard","router","username","email","password","show","togglePassword","registerUser","validateInputs","userData","subscribe","response","console","log","message","alert","navigate","error","isValidEmail","emailPattern","test","__decorate","selector","templateUrl","styleUrls"],"sources":["F:\\Angular\\Projects\\Intern-task\\frontend-taskcreation\\src\\app\\components\\register\\register.component.ts"],"sourcesContent":[" // register.component.ts\n import { Component } from '@angular/core';\n import { HttpClient } from '@angular/common/http';\n import { Router } from '@angular/router';\nimport { TaskserviceService } from 'src/app/services/taskservice.service';\n \n @Component({\n   selector: 'app-register',\n   templateUrl: './register.component.html',\n   styleUrls: ['./register.component.css']\n })\n export class RegisterComponent {\n   username: string = '';\n   email: string = '';\n   password: string = '';\n   show: boolean = false;\n   constructor(private taskboard:TaskserviceService,private router:Router) {}\n\n   togglePassword() {\n    this.show = !this.show;\n  }\n   registerUser() {\n     if (!this.validateInputs()) {\n       return;\n     }\n   \n     const userData = { username: this.username, email: this.email, password: this.password };\n   \n     this.taskboard.registerUser(userData).subscribe(\n       (response: any) => {\n         console.log(response.message);\n         alert(\"Registered Successfully, Please Login\")\n         this.router.navigate(['login']);\n       },\n       (error: any) => {\n         console.error(error);\n       }\n     );\n   }\n   \n \n   validateInputs(): boolean {\n     if (!this.username || !this.email || !this.password) {\n       alert('All fields are required.');\n       return false;\n     }\n     if (!this.isValidEmail(this.email)) {\n       alert('Invalid email format.');\n       return false;\n     }\n     return true;\n   }\n \n   isValidEmail(email: string): boolean {\n     const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n     return emailPattern.test(email);\n   }\n }\n \n"],"mappings":";AAAC;AACA,SAASA,SAAS,QAAQ,eAAe;AAUlC,WAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAK5BC,YAAoBC,SAA4B,EAASC,MAAa;IAAlD,KAAAD,SAAS,GAATA,SAAS;IAA4B,KAAAC,MAAM,GAANA,MAAM;IAJ/D,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,IAAI,GAAY,KAAK;EACoD;EAEzEC,cAAcA,CAAA;IACb,IAAI,CAACD,IAAI,GAAG,CAAC,IAAI,CAACA,IAAI;EACxB;EACCE,YAAYA,CAAA;IACV,IAAI,CAAC,IAAI,CAACC,cAAc,EAAE,EAAE;MAC1B;;IAGF,MAAMC,QAAQ,GAAG;MAAEP,QAAQ,EAAE,IAAI,CAACA,QAAQ;MAAEC,KAAK,EAAE,IAAI,CAACA,KAAK;MAAEC,QAAQ,EAAE,IAAI,CAACA;IAAQ,CAAE;IAExF,IAAI,CAACJ,SAAS,CAACO,YAAY,CAACE,QAAQ,CAAC,CAACC,SAAS,CAC5CC,QAAa,IAAI;MAChBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,OAAO,CAAC;MAC7BC,KAAK,CAAC,uCAAuC,CAAC;MAC9C,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC,EACAC,KAAU,IAAI;MACbL,OAAO,CAACK,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CACF;EACH;EAGAT,cAAcA,CAAA;IACZ,IAAI,CAAC,IAAI,CAACN,QAAQ,IAAI,CAAC,IAAI,CAACC,KAAK,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAE;MACnDW,KAAK,CAAC,0BAA0B,CAAC;MACjC,OAAO,KAAK;;IAEd,IAAI,CAAC,IAAI,CAACG,YAAY,CAAC,IAAI,CAACf,KAAK,CAAC,EAAE;MAClCY,KAAK,CAAC,uBAAuB,CAAC;MAC9B,OAAO,KAAK;;IAEd,OAAO,IAAI;EACb;EAEAG,YAAYA,CAACf,KAAa;IACxB,MAAMgB,YAAY,GAAG,iDAAiD;IACtE,OAAOA,YAAY,CAACC,IAAI,CAACjB,KAAK,CAAC;EACjC;CACD;AA9CYL,iBAAiB,GAAAuB,UAAA,EAL7BxB,SAAS,CAAC;EACTyB,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,C,EACW1B,iBAAiB,CA8C7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}