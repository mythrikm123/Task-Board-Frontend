{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/taskservice.service\";\nimport * as i2 from \"@angular/common\";\nfunction TaskboardComponent_tbody_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tbody\")(1, \"tr\")(2, \"td\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const result_r1 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(result_r1.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(result_r1.description);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(result_r1.DueDate);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(result_r1.priority);\n  }\n}\nexport class TaskboardComponent {\n  constructor(dataService) {\n    this.dataService = dataService;\n  }\n  getTask() {\n    this.dataService.getTaskData().subscribe(res => {\n      this.data = res;\n      console.log(res);\n    });\n  }\n  addTask() {\n    const title = prompt(\"Enter the Title\");\n    const description = prompt(\"enter the description\");\n    const newTask = {\n      title: title,\n      description: description\n    };\n    this.dataService.addTask(newTask).subscribe(() => {\n      console.log('Task added successfully');\n      this.getTask();\n      this.newTask = {\n        title: '',\n        description: ''\n      };\n    }, error => {\n      console.error('Error adding task:', error);\n    });\n  }\n}\n_class = TaskboardComponent;\n_class.ɵfac = function TaskboardComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.TaskserviceService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-taskboard\"]],\n  decls: 13,\n  vars: 1,\n  consts: [[3, \"click\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function TaskboardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function TaskboardComponent_Template_button_click_0_listener() {\n        return ctx.addTask();\n      });\n      i0.ɵɵtext(1, \"Add Task\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"table\")(3, \"thead\")(4, \"th\");\n      i0.ɵɵtext(5, \"Title\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"th\");\n      i0.ɵɵtext(7, \"Description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"th\");\n      i0.ɵɵtext(9, \"DueDate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"th\");\n      i0.ɵɵtext(11, \"Priority\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(12, TaskboardComponent_tbody_12_Template, 10, 4, \"tbody\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(12);\n      i0.ɵɵproperty(\"ngForOf\", ctx.data);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","result_r1","id","description","DueDate","priority","TaskboardComponent","constructor","dataService","getTask","getTaskData","subscribe","res","data","console","log","addTask","title","prompt","newTask","error","ɵɵdirectiveInject","i1","TaskserviceService","selectors","decls","vars","consts","template","TaskboardComponent_Template","rf","ctx","ɵɵlistener","TaskboardComponent_Template_button_click_0_listener","ɵɵtemplate","TaskboardComponent_tbody_12_Template","ɵɵproperty"],"sources":["F:\\Angular\\Projects\\Intern-task\\frontend-taskcreation\\src\\app\\components\\taskboard\\taskboard.component.ts","F:\\Angular\\Projects\\Intern-task\\frontend-taskcreation\\src\\app\\components\\taskboard\\taskboard.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { TaskserviceService } from 'src/app/services/taskservice.service';\n\n@Component({\n  selector: 'app-taskboard',\n  templateUrl: './taskboard.component.html',\n  styleUrls: ['./taskboard.component.css']\n})\nexport class TaskboardComponent {\n  data:any\n   \nconstructor(private dataService:TaskserviceService){}\n\ngetTask(){\n  this.dataService.getTaskData().subscribe((res)=>{\n    this.data=res;\n    console.log(res);\n  })\n}\n\naddTask(): void {\n  const title=prompt(\"Enter the Title\")\n  const description=prompt(\"enter the description\");\n  const newTask={title:title,description:description}\n  this.dataService.addTask(newTask).subscribe(\n    () => {\n      console.log('Task added successfully');\n      this.getTask();  \n      this.newTask = { title: '', description: '' }; \n    },\n    (error) => {\n      console.error('Error adding task:', error);\n    }\n  );\n}\n}\n"," <button (click)=\"addTask()\">Add Task</button>\n <table>\n    <thead>\n        <th>Title</th>\n        <th>Description</th>\n        <th>DueDate</th>\n        <th>Priority</th>\n    </thead>\n    <tbody *ngFor=\"let result of data\">\n        <tr>\n            <td>{{result.id}}</td>\n            <td>{{result.description}}</td>\n            <td>{{result.DueDate}}</td>\n            <td>{{result.priority}}</td>\n        </tr>\n    </tbody>\n </table>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}