{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/taskservice.service\";\nimport * as i2 from \"@angular/common\";\nfunction TaskboardComponent_tr_13_button_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function TaskboardComponent_tr_13_button_10_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const task_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.toggleEditMode(task_r1));\n    });\n    i0.ɵɵtext(1, \"Edit\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskboardComponent_tr_13_button_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function TaskboardComponent_tr_13_button_11_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const task_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.saveTask(task_r1));\n    });\n    i0.ɵɵtext(1, \"Save\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskboardComponent_tr_13_button_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function TaskboardComponent_tr_13_button_12_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const task_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.toggleEditMode(task_r1));\n    });\n    i0.ɵɵtext(1, \"Cancel\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskboardComponent_tr_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtemplate(10, TaskboardComponent_tr_13_button_10_Template, 2, 0, \"button\", 1);\n    i0.ɵɵtemplate(11, TaskboardComponent_tr_13_button_11_Template, 2, 0, \"button\", 1);\n    i0.ɵɵtemplate(12, TaskboardComponent_tr_13_button_12_Template, 2, 0, \"button\", 1);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const task_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r1.Title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r1.Description);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r1.DueDate);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r1.Priority);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !task_r1.editMode);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", task_r1.editMode);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", task_r1.editMode);\n  }\n}\nexport class TaskboardComponent {\n  constructor(dataService) {\n    this.dataService = dataService;\n  }\n  ngOnInit() {\n    this.getTask();\n  }\n  getTask() {\n    this.dataService.getTaskData().subscribe(res => {\n      this.data = res;\n    });\n  }\n  toggleEditMode(task) {\n    task.editMode = !task.editMode;\n  }\n  saveTask(task) {\n    const updatedTask = {\n      Title: task.Title,\n      Description: task.Description,\n      DueDate: task.DueDate,\n      Priority: task.Priority\n    };\n    this.dataService.updateTask(task._id, updatedTask).subscribe(() => {\n      console.log('Task updated successfully');\n      task.editMode = false;\n      this.getTask();\n    }, error => {\n      console.error('Error updating task:', error);\n    });\n  }\n}\n_class = TaskboardComponent;\n_class.ɵfac = function TaskboardComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.TaskserviceService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-taskboard\"]],\n  decls: 14,\n  vars: 1,\n  consts: [[4, \"ngFor\", \"ngForOf\"], [3, \"click\", 4, \"ngIf\"], [3, \"click\"]],\n  template: function TaskboardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"table\")(1, \"thead\")(2, \"th\");\n      i0.ɵɵtext(3, \"Title\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"th\");\n      i0.ɵɵtext(5, \"Description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"th\");\n      i0.ɵɵtext(7, \"DueDate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"th\");\n      i0.ɵɵtext(9, \"Priority\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"th\");\n      i0.ɵɵtext(11, \"Actions\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"tbody\");\n      i0.ɵɵtemplate(13, TaskboardComponent_tr_13_Template, 13, 7, \"tr\", 0);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"ngForOf\", ctx.data);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf],\n  styles: [\".task-cards[_ngcontent-%COMP%] {\\n    display: flex;\\n    flex-wrap: wrap;\\n    gap: 20px;\\n    margin-top: 20px;\\n  }\\n  \\n  .task-card[_ngcontent-%COMP%] {\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n    width: calc(33.33% - 20px);\\n    padding: 15px;\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n    background-color: #fff;\\n    transition: transform 0.2s, box-shadow 0.2s;\\n    cursor: pointer;\\n  }\\n  \\n  .task-card[_ngcontent-%COMP%]:hover {\\n    transform: translateY(-5px);\\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\\n  }\\n  \\n  .card-header[_ngcontent-%COMP%] {\\n    font-size: 18px;\\n    margin-bottom: 10px;\\n  }\\n  \\n  .card-content[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n    margin: 5px 0;\\n  }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90YXNrYm9hcmQvdGFza2JvYXJkLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxhQUFhO0lBQ2IsZUFBZTtJQUNmLFNBQVM7SUFDVCxnQkFBZ0I7RUFDbEI7O0VBRUE7SUFDRSxzQkFBc0I7SUFDdEIsa0JBQWtCO0lBQ2xCLDBCQUEwQjtJQUMxQixhQUFhO0lBQ2Isd0NBQXdDO0lBQ3hDLHNCQUFzQjtJQUN0QiwyQ0FBMkM7SUFDM0MsZUFBZTtFQUNqQjs7RUFFQTtJQUNFLDJCQUEyQjtJQUMzQix3Q0FBd0M7RUFDMUM7O0VBRUE7SUFDRSxlQUFlO0lBQ2YsbUJBQW1CO0VBQ3JCOztFQUVBO0lBQ0UsYUFBYTtFQUNmIiwic291cmNlc0NvbnRlbnQiOlsiLnRhc2stY2FyZHMge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtd3JhcDogd3JhcDtcclxuICAgIGdhcDogMjBweDtcclxuICAgIG1hcmdpbi10b3A6IDIwcHg7XHJcbiAgfVxyXG4gIFxyXG4gIC50YXNrLWNhcmQge1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcclxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICAgIHdpZHRoOiBjYWxjKDMzLjMzJSAtIDIwcHgpO1xyXG4gICAgcGFkZGluZzogMTVweDtcclxuICAgIGJveC1zaGFkb3c6IDAgMnB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMSk7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG4gICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMnMsIGJveC1zaGFkb3cgMC4ycztcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICB9XHJcbiAgXHJcbiAgLnRhc2stY2FyZDpob3ZlciB7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTVweCk7XHJcbiAgICBib3gtc2hhZG93OiAwIDRweCA2cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xyXG4gIH1cclxuICBcclxuICAuY2FyZC1oZWFkZXIge1xyXG4gICAgZm9udC1zaXplOiAxOHB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxuICB9XHJcbiAgXHJcbiAgLmNhcmQtY29udGVudCBwIHtcclxuICAgIG1hcmdpbjogNXB4IDA7XHJcbiAgfVxyXG4gICJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵlistener","TaskboardComponent_tr_13_button_10_Template_button_click_0_listener","ɵɵrestoreView","_r7","task_r1","ɵɵnextContext","$implicit","ctx_r5","ɵɵresetView","toggleEditMode","ɵɵtext","ɵɵelementEnd","TaskboardComponent_tr_13_button_11_Template_button_click_0_listener","_r10","ctx_r8","saveTask","TaskboardComponent_tr_13_button_12_Template_button_click_0_listener","_r13","ctx_r11","ɵɵtemplate","TaskboardComponent_tr_13_button_10_Template","TaskboardComponent_tr_13_button_11_Template","TaskboardComponent_tr_13_button_12_Template","ɵɵadvance","ɵɵtextInterpolate","Title","Description","DueDate","Priority","ɵɵproperty","editMode","TaskboardComponent","constructor","dataService","ngOnInit","getTask","getTaskData","subscribe","res","data","task","updatedTask","updateTask","_id","console","log","error","ɵɵdirectiveInject","i1","TaskserviceService","selectors","decls","vars","consts","template","TaskboardComponent_Template","rf","ctx","TaskboardComponent_tr_13_Template"],"sources":["F:\\Angular\\Projects\\Intern-task\\frontend-taskcreation\\src\\app\\components\\taskboard\\taskboard.component.ts","F:\\Angular\\Projects\\Intern-task\\frontend-taskcreation\\src\\app\\components\\taskboard\\taskboard.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { TaskserviceService } from 'src/app/services/taskservice.service';\n\n@Component({\n  selector: 'app-taskboard',\n  templateUrl: './taskboard.component.html',\n  styleUrls: ['./taskboard.component.css']\n})\nexport class TaskboardComponent implements OnInit {\n  data: any;\n\n  constructor(private dataService: TaskserviceService) {}\n\n  ngOnInit() {\n    this.getTask();\n  }\n\n  getTask() {\n    this.dataService.getTaskData().subscribe((res) => {\n      this.data = res;\n    });\n  }\n\n  toggleEditMode(task: any): void {\n    task.editMode = !task.editMode;\n  }\n\n  saveTask(task: any): void {\n    const updatedTask = {\n      Title: task.Title,\n      Description: task.Description,\n      DueDate: task.DueDate,\n      Priority: task.Priority,\n    };\n\n    this.dataService.updateTask(task._id, updatedTask).subscribe(\n      () => {\n        console.log('Task updated successfully');\n        task.editMode = false;\n        this.getTask();\n      },\n      (error) => {\n        console.error('Error updating task:', error);\n      }\n    );\n  }\n}\n","<table>\n    <thead>\n      <th>Title</th>\n      <th>Description</th>\n      <th>DueDate</th>\n      <th>Priority</th>\n      <th>Actions</th>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let task of data\">\n        <td>{{ task.Title }}</td>\n        <td>{{ task.Description }}</td>\n        <td>{{ task.DueDate }}</td>\n        <td>{{ task.Priority }}</td>\n        <td>\n          <button *ngIf=\"!task.editMode\" (click)=\"toggleEditMode(task)\">Edit</button>\n          <button *ngIf=\"task.editMode\" (click)=\"saveTask(task)\">Save</button>\n          <button *ngIf=\"task.editMode\" (click)=\"toggleEditMode(task)\">Cancel</button>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}