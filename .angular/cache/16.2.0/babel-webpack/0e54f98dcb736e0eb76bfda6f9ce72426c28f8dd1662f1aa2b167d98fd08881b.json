{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let TaskboardComponent = class TaskboardComponent {\n  constructor(dataService) {\n    this.dataService = dataService;\n    this.newTask = {}; // New task data object\n    this.showAddForm = false; // Flag to toggle add task form\n    this.searchKeyword = ''; // Add this line\n    this.filteredTasks = [];\n    this.selectedPriority = 'all';\n  }\n  ngOnInit() {\n    this.getTask();\n  }\n  getTask() {\n    this.dataService.getTaskData().subscribe(res => {\n      this.data = res;\n      this.filteredTasks = this.data; // Initialize filteredTasks with all tasks initially\n    });\n  }\n\n  toggleEditMode(task) {\n    task.editMode = !task.editMode;\n    if (task.editMode) {\n      task.updatedTitle = task.Title;\n      task.updatedDescription = task.Description;\n      task.updatedDueDate = task.DueDate;\n      task.updatedPriority = task.Priority;\n    }\n  }\n  toggleAddForm() {\n    this.showAddForm = !this.showAddForm;\n  }\n  addTask() {\n    this.dataService.addTask(this.newTask).subscribe(() => {\n      console.log('Task added successfully');\n      this.getTask();\n      this.newTask = {}; // Clear new task data\n      this.showAddForm = false; // Hide add task form\n    }, error => {\n      console.error('Error adding task:', error);\n    });\n  }\n  saveTask(task) {\n    // Call the service to update the task data\n    this.dataService.updateTask(task._id, {\n      Title: task.updatedTitle,\n      Description: task.updatedDescription,\n      DueDate: task.updatedDueDate,\n      Priority: task.updatedPriority\n    }).subscribe(() => {\n      console.log('Task updated successfully');\n      task.Title = task.updatedTitle;\n      task.Description = task.updatedDescription;\n      task.DueDate = task.updatedDueDate;\n      task.Priority = task.updatedPriority;\n      task.editMode = false;\n    }, error => {\n      console.error('Error updating task:', error);\n    });\n  }\n  deleteTask(taskId) {\n    if (confirm('Are you sure you want to delete this task?')) {\n      this.dataService.deleteTask(taskId).subscribe(() => {\n        console.log('Task deleted successfully');\n        this.getTask();\n      }, error => {\n        console.error('Error deleting task:', error);\n      });\n    }\n  }\n  onSearchChange() {\n    if (this.searchKeyword || this.selectedPriority !== 'all') {\n      this.filteredTasks = this.data.filter(task => {\n        const keywordMatch = !this.searchKeyword || task.Title.toLowerCase().includes(this.searchKeyword.toLowerCase()) || task.Description.toLowerCase().includes(this.searchKeyword.toLowerCase());\n        const priorityMatch = this.selectedPriority === 'all' || task.Priority.toLowerCase() === this.selectedPriority.toLowerCase();\n        return keywordMatch && priorityMatch;\n      });\n    } else {\n      this.filteredTasks = this.data;\n    }\n  }\n  highlightSearch(text) {\n    if (this.searchKeyword && text) {\n      const searchRegExp = new RegExp(this.searchKeyword, 'gi');\n      return text.replace(searchRegExp, match => `<span class=\"highlight\">${match}</span>`);\n    }\n    return text;\n  }\n};\nTaskboardComponent = __decorate([Component({\n  selector: 'app-taskboard',\n  templateUrl: './taskboard.component.html',\n  styleUrls: ['./taskboard.component.css']\n})], TaskboardComponent);","map":{"version":3,"names":["Component","TaskboardComponent","constructor","dataService","newTask","showAddForm","searchKeyword","filteredTasks","selectedPriority","ngOnInit","getTask","getTaskData","subscribe","res","data","toggleEditMode","task","editMode","updatedTitle","Title","updatedDescription","Description","updatedDueDate","DueDate","updatedPriority","Priority","toggleAddForm","addTask","console","log","error","saveTask","updateTask","_id","deleteTask","taskId","confirm","onSearchChange","filter","keywordMatch","toLowerCase","includes","priorityMatch","highlightSearch","text","searchRegExp","RegExp","replace","match","__decorate","selector","templateUrl","styleUrls"],"sources":["F:\\Angular\\Projects\\Intern-task\\frontend-taskcreation\\src\\app\\components\\taskboard\\taskboard.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { TaskserviceService } from 'src/app/services/taskservice.service';\n\n@Component({\n  selector: 'app-taskboard',\n  templateUrl: './taskboard.component.html',\n  styleUrls: ['./taskboard.component.css']\n})\nexport class TaskboardComponent implements OnInit {\n  data: any;\n  newTask: any = {}; // New task data object\n  showAddForm: boolean = false; // Flag to toggle add task form\n  searchKeyword: string = ''; // Add this line\n  filteredTasks: any[] = [];\n  selectedPriority: string = 'all';\n\n  constructor(private dataService: TaskserviceService) {}\n\n  ngOnInit() {\n    this.getTask();\n  }\n\n  getTask() {\n    this.dataService.getTaskData().subscribe((res) => {\n      this.data = res;\n      this.filteredTasks = this.data; // Initialize filteredTasks with all tasks initially\n    });\n  }\n\n  toggleEditMode(task: any) {\n    task.editMode = !task.editMode;\n    if (task.editMode) {\n      task.updatedTitle = task.Title;\n      task.updatedDescription = task.Description;\n      task.updatedDueDate = task.DueDate;\n      task.updatedPriority = task.Priority;\n    }\n  }\n\n  toggleAddForm() {\n    this.showAddForm = !this.showAddForm;\n  }\n\n  addTask() {\n    this.dataService.addTask(this.newTask).subscribe(\n      () => {\n        console.log('Task added successfully');\n        this.getTask();\n        this.newTask = {}; // Clear new task data\n        this.showAddForm = false; // Hide add task form\n      },\n      (error) => {\n        console.error('Error adding task:', error);\n      }\n    );\n  }\n\n  saveTask(task: any) {\n    // Call the service to update the task data\n    this.dataService.updateTask(task._id, {\n      Title: task.updatedTitle,\n      Description: task.updatedDescription,\n      DueDate: task.updatedDueDate,\n      Priority: task.updatedPriority\n    }).subscribe(\n      () => {\n        console.log('Task updated successfully');\n        task.Title = task.updatedTitle;\n        task.Description = task.updatedDescription;\n        task.DueDate = task.updatedDueDate;\n        task.Priority = task.updatedPriority;\n        task.editMode = false;\n      },\n      (error) => {\n        console.error('Error updating task:', error);\n      }\n    );\n  }\n\n  deleteTask(taskId: string) {\n    if (confirm('Are you sure you want to delete this task?')) {\n      this.dataService.deleteTask(taskId).subscribe(\n        () => {\n          console.log('Task deleted successfully');\n          this.getTask();\n        },\n        (error) => {\n          console.error('Error deleting task:', error);\n        }\n      );\n    }\n  }\n  onSearchChange() {\n    if (this.searchKeyword || this.selectedPriority !== 'all') {\n      this.filteredTasks = this.data.filter((task: Task) => {\n        const keywordMatch =\n          !this.searchKeyword ||\n          task.Title.toLowerCase().includes(this.searchKeyword.toLowerCase()) ||\n          task.Description.toLowerCase().includes(this.searchKeyword.toLowerCase());\n\n        const priorityMatch =\n          this.selectedPriority === 'all' ||\n          task.Priority.toLowerCase() === this.selectedPriority.toLowerCase();\n\n        return keywordMatch && priorityMatch;\n      });\n    } else {\n      this.filteredTasks = this.data;\n    }\n  }\n\n  highlightSearch(text: string): string {\n    if (this.searchKeyword && text) {\n      const searchRegExp = new RegExp(this.searchKeyword, 'gi');\n      return text.replace(searchRegExp, match => `<span class=\"highlight\">${match}</span>`);\n    }\n    return text;\n  }\n  \n  \n}\n// task.interface.ts\n\nexport interface Task {\n  _id: string;\n  Title: string;\n  Description: string;\n  DueDate: string;\n  Priority: string;\n  // Add other properties as needed\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}