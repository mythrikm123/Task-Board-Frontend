{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let TaskboardComponent = class TaskboardComponent {\n  constructor(dataService) {\n    this.dataService = dataService;\n    this.newTask = {}; // New task data object\n    this.showAddForm = false; // Flag to toggle add task form\n    this.searchKeyword = ''; // Add this line\n    this.selectedPriority = 'all'; // Add this line\n  }\n\n  ngOnInit() {\n    this.getTask();\n  }\n  getTask() {\n    this.dataService.getTaskData().subscribe(res => {\n      this.data = res;\n    });\n  }\n  toggleEditMode(task) {\n    task.editMode = !task.editMode;\n    if (task.editMode) {\n      task.updatedTitle = task.Title;\n      task.updatedDescription = task.Description;\n      task.updatedDueDate = task.DueDate;\n      task.updatedPriority = task.Priority;\n    }\n  }\n  toggleAddForm() {\n    this.showAddForm = !this.showAddForm;\n  }\n  addTask() {\n    this.dataService.addTask(this.newTask).subscribe(() => {\n      console.log('Task added successfully');\n      this.getTask();\n      this.newTask = {}; // Clear new task data\n      this.showAddForm = false; // Hide add task form\n    }, error => {\n      console.error('Error adding task:', error);\n    });\n  }\n  saveTask(task) {\n    // Call the service to update the task data\n    this.dataService.updateTask(task._id, {\n      Title: task.updatedTitle,\n      Description: task.updatedDescription,\n      DueDate: task.updatedDueDate,\n      Priority: task.updatedPriority\n    }).subscribe(() => {\n      console.log('Task updated successfully');\n      task.Title = task.updatedTitle;\n      task.Description = task.updatedDescription;\n      task.DueDate = task.updatedDueDate;\n      task.Priority = task.updatedPriority;\n      task.editMode = false;\n    }, error => {\n      console.error('Error updating task:', error);\n    });\n  }\n  deleteTask(taskId) {\n    if (confirm('Are you sure you want to delete this task?')) {\n      this.dataService.deleteTask(taskId).subscribe(() => {\n        console.log('Task deleted successfully');\n        this.getTask();\n      }, error => {\n        console.error('Error deleting task:', error);\n      });\n    }\n  }\n  filterTasks() {\n    console.log('Filtering tasks');\n    console.log('Search keyword:', this.searchKeyword);\n    console.log('Selected priority:', this.selectedPriority);\n    if (!this.data) {\n      return [];\n    }\n    if (this.selectedPriority === 'all') {\n      return this.data.filter(task => task.Title.includes(this.searchKeyword));\n    } else {\n      return this.data.filter(task => task.Title.includes(this.searchKeyword) && task.Priority === this.selectedPriority);\n    }\n  }\n};\nTaskboardComponent = __decorate([Component({\n  selector: 'app-taskboard',\n  templateUrl: './taskboard.component.html',\n  styleUrls: ['./taskboard.component.css']\n})], TaskboardComponent);","map":{"version":3,"names":["Component","TaskboardComponent","constructor","dataService","newTask","showAddForm","searchKeyword","selectedPriority","ngOnInit","getTask","getTaskData","subscribe","res","data","toggleEditMode","task","editMode","updatedTitle","Title","updatedDescription","Description","updatedDueDate","DueDate","updatedPriority","Priority","toggleAddForm","addTask","console","log","error","saveTask","updateTask","_id","deleteTask","taskId","confirm","filterTasks","filter","includes","__decorate","selector","templateUrl","styleUrls"],"sources":["F:\\Angular\\Projects\\Intern-task\\frontend-taskcreation\\src\\app\\components\\taskboard\\taskboard.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { TaskserviceService } from 'src/app/services/taskservice.service';\n\n@Component({\n  selector: 'app-taskboard',\n  templateUrl: './taskboard.component.html',\n  styleUrls: ['./taskboard.component.css']\n})\nexport class TaskboardComponent implements OnInit {\n  data: any;\n  newTask: any = {}; // New task data object\n  showAddForm: boolean = false; // Flag to toggle add task form\n  searchKeyword: string = ''; // Add this line\n  selectedPriority: string = 'all'; // Add this line\n  filteredTasks: any;\n\n\n  constructor(private dataService: TaskserviceService) {}\n\n  ngOnInit() {\n    this.getTask();\n  }\n\n  getTask() {\n    this.dataService.getTaskData().subscribe((res) => {\n      this.data = res;\n    });\n  }\n\n  toggleEditMode(task: any) {\n    task.editMode = !task.editMode;\n    if (task.editMode) {\n      task.updatedTitle = task.Title;\n      task.updatedDescription = task.Description;\n      task.updatedDueDate = task.DueDate;\n      task.updatedPriority = task.Priority;\n    }\n  }\n\n  toggleAddForm() {\n    this.showAddForm = !this.showAddForm;\n  }\n\n  addTask() {\n    this.dataService.addTask(this.newTask).subscribe(\n      () => {\n        console.log('Task added successfully');\n        this.getTask();\n        this.newTask = {}; // Clear new task data\n        this.showAddForm = false; // Hide add task form\n      },\n      (error) => {\n        console.error('Error adding task:', error);\n      }\n    );\n  }\n\n  saveTask(task: any) {\n    // Call the service to update the task data\n    this.dataService.updateTask(task._id, {\n      Title: task.updatedTitle,\n      Description: task.updatedDescription,\n      DueDate: task.updatedDueDate,\n      Priority: task.updatedPriority\n    }).subscribe(\n      () => {\n        console.log('Task updated successfully');\n        task.Title = task.updatedTitle;\n        task.Description = task.updatedDescription;\n        task.DueDate = task.updatedDueDate;\n        task.Priority = task.updatedPriority;\n        task.editMode = false;\n      },\n      (error) => {\n        console.error('Error updating task:', error);\n      }\n    );\n  }\n\n  deleteTask(taskId: string) {\n    if (confirm('Are you sure you want to delete this task?')) {\n      this.dataService.deleteTask(taskId).subscribe(\n        () => {\n          console.log('Task deleted successfully');\n          this.getTask();\n        },\n        (error) => {\n          console.error('Error deleting task:', error);\n        }\n      );\n    }\n  }\n  filterTasks() {\n    console.log('Filtering tasks');\n    console.log('Search keyword:', this.searchKeyword);\n    console.log('Selected priority:', this.selectedPriority);\n    if (!this.data) {\n      return [];\n    }\n\n    if (this.selectedPriority === 'all') {\n      return this.data.filter((task: any) => task.Title.includes(this.searchKeyword));\n    } else {\n      return this.data.filter((task: any) =>\n        task.Title.includes(this.searchKeyword) && task.Priority === this.selectedPriority\n      );\n    }\n  }\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}